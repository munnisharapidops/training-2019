1.JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program               called the JavaScript engine.
   2.The browser has an embedded engine sometimes called a “JavaScript virtual machine”.
   3.Different engines have different “codenames”. For example:
V8 – in Chrome and Opera.
SpiderMonkey – in Firefox.
   4.


What is JS:-
JavaScript was initially created to “make web pages alive”  and interactive with the user.
JavaScript is a independent language with its own specification called ECMA Script  
Javascript was introduced by Brendan Eich a Netscape employee.
Javascript at its development phase was called Mocha 
 Javascript has come a long way ie from a client-side programming/frameworks (like Angular/React) to a server-side technology like NodeJS in 2009.
What is ES:-
    In the year 1996, a standards organization called ECMA (European Computer Manufacturers Association) International carved out standard specification called ECMAScript (ES) which all browser vendors could implement. And Javascript is the most well-known implementations of ES, while ActionScript (from Macromedia/Adobe Systems) and JScript (from Microsoft) are other implementations of ES.
List of Version from ES:-
Till date, ES has published nine versions and the latest one (9th version) was published in the year 2018.
ES1 1997
ES2 1998
ES3 1999
ES4 Abandoned
ES5 2009
ES6 2015
ES7 2016
ES8 2017
ES9 2018
ECMA Script's first three versions- ES1, ES2, ES3 were yearly updates whereas, ES4 was never released due to political disagreements. After a decade, ES5 was eventually released with several additions
ES5:-
    ES5 was released in 2009, ten years after the release of its previous version. Here is a list of features that have come with the es5 version.
1. ‘USE STRICT’ DIRECTIVE: -
     The earlier versions of JS allow the usage of undeclared variables. But when the es5 ‘use strict’ feature is used, an error is reported. When it is located at the top of a script, the whole script works the “modern” way.

     ex:  'use srtict'
              a=20 /// leads to an error. a is not defined.
2. NEW METHODS IN AN ARRAY:-
  
     isArray(): This method checks if the object is an array or not and returns the result in true or false.
                  ex:-  
                          let arr=[2,3,3,5];
                          let a=3;
                          console.log(Array.isArray(arr));  // true
                           console.log(Array.isArray(a));   // false 
   forEach(): It executes the function for every element found in the array.
             
       ex:-    let arr=[1,2,3,4];
                  arr.forEach(function(print)){
                        console.log(print); // print all elements in arr
                     }
 
    map(): The map() method creates a new array by mapping every element of the array (on which the map is used).
 
      ex:-    let arr=[1,2,3];
                  let new_arr=arr.forEach(function(print)){
                        return print*print;
                     }
                console.log(new_arr);  // print [1,4,9]
filter(): It creates a new array that contains elements which got filtered by making array elements pass some condition.
     ex:- let arr=['munni','janu','munnisha',apple'];
              const result=arr.filter(arr=>arr.length > 4);
               console.log(result); // o/p ---> munni,munisha,apple
reduce(): It applies a function to each element in an array and reduces the array to a single element.
Ex:-
   let arr=[5,10,15,20,25];
const result=arr.reduce((total,currentvalue) => {
             console.log(currentvalue); // 5,10,15,20,25
     return (total+currentvalue);
});
console.log(result); //75
NOTE: This example is the same as iterating over every element to calculate the sum.
reduceRight(): It is quite same to reduce method, except for the traversal that happens from right to left.
  Ex:-
           
let arr=[5,10,12,20,25];
const result=arr.reduce((total,currentvalue) => {
             console.log(currentvalue); //20,15,10,5
     return (total+currentvalue);
});
console.log(result); //75
every(): This method checks a condition with every element of an array and if every element satisfies then returns true if at least one element doesn’t satisfy the condition then returns false.
   Ex:-
3. JSON SUPPORT
parse(): It parses a JSON string that is like an object.
Ex:  
let arr=[5,10,15,20,25]
const result=arr.every(val =>{
   return val >100
}
  console.log(result); // return false
some(): It is same as every() method wherein some() checks for at least one element that gets satisfied with the condition and if found returns true and if none satisfies then false.
  Ex:-
 var arr=[5,10,15,20,25]
const result=arr.every(val =>{
   return val >24
}
  console.log(result); // return true

indexOf(): Returns the index of the first match in an array. If not found then returns -1.
Ex:-
 let arr=['ant','bat','cat','bat','mat];
console.log(arr.indexOf(bat)); // 1
lastIndexOf(): Same as indexOf but checks and returns from the other end of an array.
Ex:-
 let arr=['ant','bat','cat','bat','mat];
console.log(arr.lastindexOf(bat)); // 3
3. JSON SUPPORT
parse(): It parses a JSON string that is like an object.
Ex: 
                let string={"a":1,"b":2};
              let obj=JSON.parse(string);
               console.log(obj.a); //1
stringify(): This method converts an object to a JSON string.
Ex:-
console.log(JSON.stringify({x:9,y:7})); // "{"x":9,"y":7}"
4. NEW METHODS IN A DATE
now(): The now() method returns the number of milliseconds elapsed since 01-Jan-1970 UTC.
Ex: 
  
let dt=Date.now ()  //display the no.of milliseconds since midnight jan 1 1970

valueOf(): It returns the primitive value of a date object.
Ex:-
 let date= new Date();
let result=date.valuOf()   // display primitiva value of date object
5. GETTERS AND SETTERS:
The get method returns the value of a variable, and the set method sets the value of the variable.
6. PROPERTY METHODS
Object.defineProperty(): This method lets the user define the property of an object and/or change its value.
ES6:

Below is a list of the features that have come with ES6 version:
LET & CONST:
Till ES5, JS has only function scope and global scope with the introduction of let keyword in ES6, JS can now have block scope.
Ex: -
var v=10;
fun();
function fun(){
  console.log("v:",v); //10
let l=20;
console.log("l:",l);  //20
}
console.log("v:",v);  //10
console.log("l:",l); // l si not defines because let is block scope
FOR..OF:
for...of is an alternative for both for...in and forEach() and loops iterable data structures like Arrays, Maps, Sets, and strings.
Ex:-
const val=["apple","banana","mango"];
for (const a of val){
   console.log(a);
}
o/p:apple
        banana
        mango
DEFAULT PARAMETERS:
Provides default values to function parameters if no value or undefined is passed.
Ex: 
 function fun(a,b,c=0){
     console.log("a:  ");
 console.log("b:  ");
 console.log("c:  ");
}
fun(1,2)      // a:1,b:2,c:0
fun(1,2,3)  // a:1,b:2,c:3
REST OPERATOR:
Rest Operator is used to handle function parameters. It uses three dots as its syntax (i.e …).
Ex: 
function fun(a,...b){
console.log('a: ' + a +'b: ' +b); // a: 1 b:2 3 4
}
fun(1,2,3,4)
SPREAD OPERATOR:
Spread Operator is used with arrays and its syntax is exactly the same as that of Rest Operator (ie …). It is used to split the contents of an array.
Ex: -
   let arr=[1,2,3];
   let arr2=[4,5];
   let new-arr=[...arr,...arr2];
   console.log(new-arr);
TEMPLATE LITERALS/STRINGS:
It allows embedded expressions, which makes print statements easy.
Ex:
   const a=7;
const  b=8;
console.log(`{a: ${a},b: ${b}}`);  //a:7 , b:8
ARROW FUNCTIONS:
Arrow Functions use => as its token and so are also called as Fat Arrow Functions. They are one line functions and are much like Lambda functions in programming languages like Java 8 and Python. Prior to =>, JS has a function keyword.
Ex:
const name=(sunny)=>{
return(`${sunny} ${sunny}`);
}
console.log(name('munni'));
Other features in ES6 include:
Set, WeakSet, Map, WeakMap
Generators
Symbols
Unicode
Modules
Proxies
Built-Ins
Binary and Octal
Reflect
Tail Call Optimization
ES7:
ES7 or ECMAScript 2016 was released in the year 2016. This version gives suitable alternatives to already used functionalities.

EXPONENTIATION OPERATOR (**):
ES7 added an exponentiation operator (**) to already JavaScript supported arithmetic operations like +,-,*. This operator raises the first operand to the power second operand. 
Ex:-
console.log( 3**2);  // 3 to the power of 2 i.e 9
INCLUDES(): 
Returns true if an array includes a value, if not returns false.
Ex:-
const a=['apple','boll','cat'];
console.log(a.includes('cat')); // return true
ES8:
ES8 or ECMAScript 2017 was released in the year 2017. This version allows new methods of coding with JavaScript. 
PADSTART():
This method pads a string with another string at the beginning.
Ex: let pad='a3';
       console.log(pad.padStart(3,'#'); // #a3
PADEND():
This method pads a string with another string and makes the resulting string reach a given length. It adds spaces at the end of the string.
Ex: 
let pad='a3';
       console.log(pad.padEnd(4,'#'); // a3..
SYNC/AWAIT:
Await operator, applied only inside an async function, waits to be rejected or resolved by a promise.

OBJECT.ENTRIES():
It returns an array that contains the key-value pairs of a given object as an array.   
 Ex: -
const arr= {1:'munni',1:'sunny',2:'janu'}
object.entries(arr); // [['1','munni'] ,['2','sunny'],['3','janu']]

